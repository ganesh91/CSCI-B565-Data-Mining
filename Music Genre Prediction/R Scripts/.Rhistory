bootstrap.h<-function(pop,sims){
est.h <-c()
est.A <-c()
est.B <-c()
for (i in 1:sims){
b<-sample(pop,length(pop),replace = TRUE)
b.sample <- est.h(b)
est.h[i]<- b.sample$h
est.A[i]<- b.sample$A
est.B[i]<- b.sample$B
}
best.h <- mean(est.h)
g.lower <- est.h - qt(0.975,df=length(est.h)-1)*sd(est.h)
g.upper <- best.h + qt(0.975,df=length(est.h)-1)*sd(est.h)
best.A <- mean(est.A)
A.lower <- best.A - qt(0.975,df=length(est.A)-1)*sd(est.A)
A.upper <- best.A + qt(0.975,df=length(est.A)-1)*sd(est.A)
best.B <- mean(est.B)
B.lower <- best.B - qt(0.975,df=length(est.B)-1)*sd(est.B)
B.upper <- best.B + qt(0.975,df=length(est.B)-1)*sd(est.B)
cor.est <- cor (cbind(est.H,est.A,est.B))
es.plt <- ggpairs(as.data.frame(cbind(est.h,est.A,est.B)))
return(list(h=best.h,A=best.A,B=best.B,gcil=g.lower,gciu=g.upper,Acil=A.lower,Aciu=A.upper,bcil=B.lower,bcil=B.lower,cor.est=cor.est,es.plt=es.plt))
}
b =c(12.87,15.09,17.39,18.62,20.24,23.76,24.35, 24.74,24.81,24.96,25.19,25.75,25.89,25.97, 26.07,26.19,26.35,26.36,26.67,26.76,27.07, 27.12,27.26,27.28,27.30,27.31,27.46,27.49, 27.54,27.72,27.81,27.82,27.88,27.90,27.93, 28.03,28.05,28.06,28.07,28.07,28.17,28.19, 28.20,28.22,28.25,28.34,28.35,28.46,28.53,28.58,28.64,28.65,28.70,28.92,28.99,29.00, 29.07,29.16,29.16,29.17,29.18,29.22,29.23, 29.28,29.37,29.40,29.45,29.59,29.62,29.63, 29.71,29.74,29.81,29.82,29.85,29.86,29.86, 29.86,29.87,29.88,29.92,30.04,30.05,30.09, 30.09,30.10,30.19,30.34,30.37,30.38,30.39, 30.43,30.43,30.53,30.55,30.55,30.57,30.64, 30.68,30.77,30.86,30.93,30.98,31.08,31.22, 31.32,31.35,31.41,31.52,31.60,31.65,31.76, 31.76,31.77,31.96,31.98,32.28,32.33,32.39, 32.42,32.61,32.68,32.71,32.73,32.79,33.15, 33.18,33.19,33.20,33.24,33.33,33.35,33.43, 33.60,33.65,33.66,33.70,33.77,33.80,34.03, 34.03,34.26,34.33,34.44,34.68,34.71,34.91, 34.93,35.09,35.40,35.44,36.63,37.81,37.84, 39.47,39.58,39.72,41.00,41.49,41.52,43.50)
s <- bootstrap.h(b,1000)
print(paste("The H estimate is ",s$h))
print(paste("C.I is between",s$gcil," and ",s$gciu))
print(paste("The A estimate is ",s$A))
print(paste("C.I is between",s$Acil," and ",s$Aciu))
print(paste("The B estimate is ",s$B))
print(paste("C.I is between",s$bcil," and ",s$bciu))
#Co-Relation Plot
s$cor.est
#Pairs Plot
print(s$es.plt)
getwd(0)
getwd()
est.h<-function(b){
source("lvalprogs.r")
source("rrline.r")
ll <- lval(b)
n<-length(b)
gh2.data <- b
ll.gh2 <- lval(gh2.data)
yy.gh2 <- log(ll.gh2[-1,6])
xx.gh2 <- (qnorm((ll.gh2[-1,1] - 1/3)/(161 + 1/3)))^2/2
plot(xx.gh2,yy.gh2,main="Estimate h and B",
ylab="log(pseudo-sigma)", xlab=expression(z[p]^2/2))
rr <- run.rrline(xx.gh2,yy.gh2)
return(list(h=rr$b,A=median(b),B=rr$a))
}
bootstrap.h<-function(pop,sims){
est.h <-c()
est.A <-c()
est.B <-c()
for (i in 1:sims){
b<-sample(pop,length(pop),replace = TRUE)
b.sample <- est.h(b)
est.h[i]<- b.sample$h
est.A[i]<- b.sample$A
est.B[i]<- b.sample$B
}
best.h <- mean(est.h)
g.lower <- est.h - qt(0.975,df=length(est.h)-1)*sd(est.h)
g.upper <- best.h + qt(0.975,df=length(est.h)-1)*sd(est.h)
best.A <- mean(est.A)
A.lower <- best.A - qt(0.975,df=length(est.A)-1)*sd(est.A)
A.upper <- best.A + qt(0.975,df=length(est.A)-1)*sd(est.A)
best.B <- mean(est.B)
B.lower <- best.B - qt(0.975,df=length(est.B)-1)*sd(est.B)
B.upper <- best.B + qt(0.975,df=length(est.B)-1)*sd(est.B)
cor.est <- cor (cbind(est.H,est.A,est.B))
es.plt <- ggpairs(as.data.frame(cbind(est.h,est.A,est.B)))
return(list(h=best.h,A=best.A,B=best.B,gcil=g.lower,gciu=g.upper,Acil=A.lower,Aciu=A.upper,bcil=B.lower,bcil=B.lower,cor.est=cor.est,es.plt=es.plt))
}
b =c(12.87,15.09,17.39,18.62,20.24,23.76,24.35, 24.74,24.81,24.96,25.19,25.75,25.89,25.97, 26.07,26.19,26.35,26.36,26.67,26.76,27.07, 27.12,27.26,27.28,27.30,27.31,27.46,27.49, 27.54,27.72,27.81,27.82,27.88,27.90,27.93, 28.03,28.05,28.06,28.07,28.07,28.17,28.19, 28.20,28.22,28.25,28.34,28.35,28.46,28.53,28.58,28.64,28.65,28.70,28.92,28.99,29.00, 29.07,29.16,29.16,29.17,29.18,29.22,29.23, 29.28,29.37,29.40,29.45,29.59,29.62,29.63, 29.71,29.74,29.81,29.82,29.85,29.86,29.86, 29.86,29.87,29.88,29.92,30.04,30.05,30.09, 30.09,30.10,30.19,30.34,30.37,30.38,30.39, 30.43,30.43,30.53,30.55,30.55,30.57,30.64, 30.68,30.77,30.86,30.93,30.98,31.08,31.22, 31.32,31.35,31.41,31.52,31.60,31.65,31.76, 31.76,31.77,31.96,31.98,32.28,32.33,32.39, 32.42,32.61,32.68,32.71,32.73,32.79,33.15, 33.18,33.19,33.20,33.24,33.33,33.35,33.43, 33.60,33.65,33.66,33.70,33.77,33.80,34.03, 34.03,34.26,34.33,34.44,34.68,34.71,34.91, 34.93,35.09,35.40,35.44,36.63,37.81,37.84, 39.47,39.58,39.72,41.00,41.49,41.52,43.50)
s <- bootstrap.h(b,1000)
print(paste("The H estimate is ",s$h))
print(paste("C.I is between",s$gcil," and ",s$gciu))
print(paste("The A estimate is ",s$A))
print(paste("C.I is between",s$Acil," and ",s$Aciu))
print(paste("The B estimate is ",s$B))
print(paste("C.I is between",s$bcil," and ",s$bciu))
#Co-Relation Plot
s$cor.est
#Pairs Plot
print(s$es.plt)
est.h<-function(b){
source("lvalprogs.r")
source("rrline.r")
ll <- lval(b)
n<-length(b)
gh2.data <- b
ll.gh2 <- lval(gh2.data)
yy.gh2 <- log(ll.gh2[-1,6])
xx.gh2 <- (qnorm((ll.gh2[-1,1] - 1/3)/(161 + 1/3)))^2/2
plot(xx.gh2,yy.gh2,main="Estimate h and B",
ylab="log(pseudo-sigma)", xlab=expression(z[p]^2/2))
rr <- run.rrline(xx.gh2,yy.gh2)
return(list(h=rr$b,A=median(b),B=rr$a))
}
bootstrap.h<-function(pop,sims){
est.h <-c()
est.A <-c()
est.B <-c()
for (i in 1:sims){
b<-sample(pop,length(pop),replace = TRUE)
b.sample <- est.h(b)
est.h[i]<- b.sample$h
est.A[i]<- b.sample$A
est.B[i]<- b.sample$B
}
best.h <- mean(est.h)
g.lower <- est.h - qt(0.975,df=length(est.h)-1)*sd(est.h)
g.upper <- best.h + qt(0.975,df=length(est.h)-1)*sd(est.h)
best.A <- mean(est.A)
A.lower <- best.A - qt(0.975,df=length(est.A)-1)*sd(est.A)
A.upper <- best.A + qt(0.975,df=length(est.A)-1)*sd(est.A)
best.B <- mean(est.B)
B.lower <- best.B - qt(0.975,df=length(est.B)-1)*sd(est.B)
B.upper <- best.B + qt(0.975,df=length(est.B)-1)*sd(est.B)
cor.est <- cor (cbind(est.h,est.A,est.B))
es.plt <- ggpairs(as.data.frame(cbind(est.h,est.A,est.B)))
return(list(h=best.h,A=best.A,B=best.B,gcil=g.lower,gciu=g.upper,Acil=A.lower,Aciu=A.upper,bcil=B.lower,bcil=B.lower,cor.est=cor.est,es.plt=es.plt))
}
b =c(12.87,15.09,17.39,18.62,20.24,23.76,24.35, 24.74,24.81,24.96,25.19,25.75,25.89,25.97, 26.07,26.19,26.35,26.36,26.67,26.76,27.07, 27.12,27.26,27.28,27.30,27.31,27.46,27.49, 27.54,27.72,27.81,27.82,27.88,27.90,27.93, 28.03,28.05,28.06,28.07,28.07,28.17,28.19, 28.20,28.22,28.25,28.34,28.35,28.46,28.53,28.58,28.64,28.65,28.70,28.92,28.99,29.00, 29.07,29.16,29.16,29.17,29.18,29.22,29.23, 29.28,29.37,29.40,29.45,29.59,29.62,29.63, 29.71,29.74,29.81,29.82,29.85,29.86,29.86, 29.86,29.87,29.88,29.92,30.04,30.05,30.09, 30.09,30.10,30.19,30.34,30.37,30.38,30.39, 30.43,30.43,30.53,30.55,30.55,30.57,30.64, 30.68,30.77,30.86,30.93,30.98,31.08,31.22, 31.32,31.35,31.41,31.52,31.60,31.65,31.76, 31.76,31.77,31.96,31.98,32.28,32.33,32.39, 32.42,32.61,32.68,32.71,32.73,32.79,33.15, 33.18,33.19,33.20,33.24,33.33,33.35,33.43, 33.60,33.65,33.66,33.70,33.77,33.80,34.03, 34.03,34.26,34.33,34.44,34.68,34.71,34.91, 34.93,35.09,35.40,35.44,36.63,37.81,37.84, 39.47,39.58,39.72,41.00,41.49,41.52,43.50)
s <- bootstrap.h(b,1000)
print(paste("The H estimate is ",s$h))
print(paste("C.I is between",s$gcil," and ",s$gciu))
print(paste("The A estimate is ",s$A))
print(paste("C.I is between",s$Acil," and ",s$Aciu))
print(paste("The B estimate is ",s$B))
print(paste("C.I is between",s$bcil," and ",s$bciu))
#Co-Relation Plot
s$cor.est
#Pairs Plot
print(s$es.plt)
est.h<-function(b){
source("lvalprogs.r")
source("rrline.r")
ll <- lval(b)
n<-length(b)
gh2.data <- b
ll.gh2 <- lval(gh2.data)
yy.gh2 <- log(ll.gh2[-1,6])
xx.gh2 <- (qnorm((ll.gh2[-1,1] - 1/3)/(161 + 1/3)))^2/2
plot(xx.gh2,yy.gh2,main="Estimate h and B",
ylab="log(pseudo-sigma)", xlab=expression(z[p]^2/2))
rr <- run.rrline(xx.gh2,yy.gh2)
return(list(h=rr$b,A=median(b),B=rr$a))
}
bootstrap.h<-function(pop,sims){
library(GGally)
est.h <-c()
est.A <-c()
est.B <-c()
for (i in 1:sims){
b<-sample(pop,length(pop),replace = TRUE)
b.sample <- est.h(b)
est.h[i]<- b.sample$h
est.A[i]<- b.sample$A
est.B[i]<- b.sample$B
}
best.h <- mean(est.h)
g.lower <- est.h - qt(0.975,df=length(est.h)-1)*sd(est.h)
g.upper <- best.h + qt(0.975,df=length(est.h)-1)*sd(est.h)
best.A <- mean(est.A)
A.lower <- best.A - qt(0.975,df=length(est.A)-1)*sd(est.A)
A.upper <- best.A + qt(0.975,df=length(est.A)-1)*sd(est.A)
best.B <- mean(est.B)
B.lower <- best.B - qt(0.975,df=length(est.B)-1)*sd(est.B)
B.upper <- best.B + qt(0.975,df=length(est.B)-1)*sd(est.B)
cor.est <- cor (cbind(est.h,est.A,est.B))
es.plt <- ggpairs(as.data.frame(cbind(est.h,est.A,est.B)))
return(list(h=best.h,A=best.A,B=best.B,gcil=g.lower,gciu=g.upper,Acil=A.lower,Aciu=A.upper,bcil=B.lower,bcil=B.lower,cor.est=cor.est,es.plt=es.plt))
}
b =c(12.87,15.09,17.39,18.62,20.24,23.76,24.35, 24.74,24.81,24.96,25.19,25.75,25.89,25.97, 26.07,26.19,26.35,26.36,26.67,26.76,27.07, 27.12,27.26,27.28,27.30,27.31,27.46,27.49, 27.54,27.72,27.81,27.82,27.88,27.90,27.93, 28.03,28.05,28.06,28.07,28.07,28.17,28.19, 28.20,28.22,28.25,28.34,28.35,28.46,28.53,28.58,28.64,28.65,28.70,28.92,28.99,29.00, 29.07,29.16,29.16,29.17,29.18,29.22,29.23, 29.28,29.37,29.40,29.45,29.59,29.62,29.63, 29.71,29.74,29.81,29.82,29.85,29.86,29.86, 29.86,29.87,29.88,29.92,30.04,30.05,30.09, 30.09,30.10,30.19,30.34,30.37,30.38,30.39, 30.43,30.43,30.53,30.55,30.55,30.57,30.64, 30.68,30.77,30.86,30.93,30.98,31.08,31.22, 31.32,31.35,31.41,31.52,31.60,31.65,31.76, 31.76,31.77,31.96,31.98,32.28,32.33,32.39, 32.42,32.61,32.68,32.71,32.73,32.79,33.15, 33.18,33.19,33.20,33.24,33.33,33.35,33.43, 33.60,33.65,33.66,33.70,33.77,33.80,34.03, 34.03,34.26,34.33,34.44,34.68,34.71,34.91, 34.93,35.09,35.40,35.44,36.63,37.81,37.84, 39.47,39.58,39.72,41.00,41.49,41.52,43.50)
s <- bootstrap.h(b,1000)
print(paste("The H estimate is ",s$h))
print(paste("C.I is between",s$gcil," and ",s$gciu))
print(paste("The A estimate is ",s$A))
print(paste("C.I is between",s$Acil," and ",s$Aciu))
print(paste("The B estimate is ",s$B))
print(paste("C.I is between",s$bcil," and ",s$bciu))
#Co-Relation Plot
s$cor.est
#Pairs Plot
print(s$es.plt)
?which
setwd("C:/Users/Ganesh/Google Drive/Courses/CSCI B 565/Extra Credit")
c<-read.csv("genresTrain.csv")
cor(c)
View(c)
data = rnorm(100, 3, 2)
getGaussianMax = function(data){
d = density(data, kernel="gaussian")
index = which(d$y == max(d$y), arr.ind =TRUE)
ans = d$x[index]
return(ans)
}
calculatePseudoValues = function(data) {
n = length(data)
y.all = getGausianMax(data)
PV = numeric(n)
for( i in 1:n) {
yminusi = getGausianMax(data[-i])
PV[i] = n*y.all - (n-1)*yminusi
}
return(PV)
}
PVAll = calculatePseudoValues(data)
n = length(PVAll)
mean(PVAll)
jackKnifeEstimate = mean(PVAll)
varJK = sum((PVAll - jackKnifeEstimate)^2)/(n*(n-1))
seJK = sqrt(varJK)
seJK
getbootstrapestimate = function(data, nsim) {
theta = numeric(nsim)
varTheta = numeric(nsim)
n = length(data)
index = 1:n
for (i in 1:nsim){
sampleindex= sample(index,n,replace=TRUE)
theta[i] = mean(getGausEstimate(data[sampleindex]))
}
return(list(thetaBS = mean(theta), varBS = var(theta), seBS = sqrt(var(theta))))
}
# Now we calculate the Bootstrap estimate of the statistic
BS = getbootstrapestimate(data, 100)$seBS
BS
data = rnorm(100, 3, 2)
getGaussianMax = function(data){
d = density(data, kernel="gaussian")
index = which(d$y == max(d$y), arr.ind =TRUE)
ans = d$x[index]
return(ans)
}
calculatePseudoValues = function(data) {
n = length(data)
y.all = getGausianMax(data)
PV = numeric(n)
for( i in 1:n) {
yminusi = getGausianMax(data[-i])
PV[i] = n*y.all - (n-1)*yminusi
}
return(PV)
}
PVAll = calculatePseudoValues(data)
n = length(PVAll)
mean(PVAll)
jackKnifeEstimate = mean(PVAll)
varJK = sum((PVAll - jackKnifeEstimate)^2)/(n*(n-1))
seJK = sqrt(varJK)
seJK
getbootstrapestimate = function(data, nsim) {
theta = numeric(nsim)
varTheta = numeric(nsim)
n = length(data)
index = 1:n
for (i in 1:nsim){
sampleindex= sample(index,n,replace=TRUE)
theta[i] = mean(getGausianMax(data[sampleindex]))
}
return(list(thetaBS = mean(theta), varBS = var(theta), seBS = sqrt(var(theta))))
}
# Now we calculate the Bootstrap estimate of the statistic
BS = getbootstrapestimate(data, 100)$seBS
BS
data = rnorm(100, 3, 2)
getGaussianMax = function(data){
d = density(data, kernel="gaussian")
index = which(d$y == max(d$y), arr.ind =TRUE)
ans = d$x[index]
return(ans)
}
calculatePseudoValues = function(data) {
n = length(data)
y.all = getGausianMax(data)
PV = numeric(n)
for( i in 1:n) {
yminusi = getGausianMax(data[-i])
PV[i] = n*y.all - (n-1)*yminusi
}
return(PV)
}
PVAll = calculatePseudoValues(data)
n = length(PVAll)
mean(PVAll)
jackKnifeEstimate = mean(PVAll)
varJK = sum((PVAll - jackKnifeEstimate)^2)/(n*(n-1))
seJK = sqrt(varJK)
seJK
getbootstrapestimate = function(data, nsim) {
theta = numeric(nsim)
varTheta = numeric(nsim)
n = length(data)
index = 1:n
for (i in 1:nsim){
sampleindex= sample(index,n,replace=TRUE)
theta[i] = mean(getGaussianMax(data[sampleindex]))
}
return(list(thetaBS = mean(theta), varBS = var(theta), seBS = sqrt(var(theta))))
}
# Now we calculate the Bootstrap estimate of the statistic
BS = getbootstrapestimate(data, 100)$seBS
BS
data = rnorm(100, 3, 2)
getGaussianMax = function(data){
d = density(data, kernel="gaussian")
index = which(d$y == max(d$y), arr.ind =TRUE)
ans = d$x[index]
return(ans)
}
calculatePseudoValues = function(data) {
n = length(data)
y.all = getGaussianMax(data)
PV = numeric(n)
for( i in 1:n) {
yminusi = getGaussianMax(data[-i])
PV[i] = n*y.all - (n-1)*yminusi
}
return(PV)
}
PVAll = calculatePseudoValues(data)
n = length(PVAll)
mean(PVAll)
jackKnifeEstimate = mean(PVAll)
varJK = sum((PVAll - jackKnifeEstimate)^2)/(n*(n-1))
seJK = sqrt(varJK)
seJK
getbootstrapestimate = function(data, nsim) {
theta = numeric(nsim)
varTheta = numeric(nsim)
n = length(data)
index = 1:n
for (i in 1:nsim){
sampleindex= sample(index,n,replace=TRUE)
theta[i] = mean(getGaussianMax(data[sampleindex]))
}
return(list(thetaBS = mean(theta), varBS = var(theta), seBS = sqrt(var(theta))))
}
# Now we calculate the Bootstrap estimate of the statistic
BS = getbootstrapestimate(data, 100)$seBS
BS
r1<-c(16,13.6,16.2,14.2,9.3,15.1,10.6,12,11.3,10.5,7.7,10.6)
r2<-c(30.4,27.3,32.4,24.1,27.3,21,19.2,22,19.4,14.9,11.4,18)
r3<-c(34.8,37.1,40.3,30.3,35,38.1,26.2,30.6,25.8,18.1,12.3,17.9)
r4<-c(37.2,41.8,42.1,34.6,38.8,34,30,31.8,27.9,18.9,13,17.9)
r5<-c(35.3,40.6,42.9,32.5,38.6,38.9,30.9,32.4,28.5,19.5,12.5,17.9)
r6<-c(39.2,41.4,43.9,35.4,37.5,39.6,32.4,31.1,28.1,22.2,13.7,18.9)
r7<-c(39.7,44.3,45.5,38.7,42.4,41.4,35.5,31.5,27.8,21.9,14.4,19.9)
df<-rbind(r1,r2,r3,r4,r5,r6,r7)
colnames(df)<-c(111,211,311,412,512,612,721,821,921,1022,1122,1222)
rownames(df)<-c(95,175,250,350,500,675,1000)
results<-medpolish(df)
Analog_R_Square<- 1-((sum(abs(results$residuals))) /(sum(abs(df-results$overall))))
symbolPlot<-function(mat){
result<-medpolish(mat)
res<-c(result$residuals)
genNos<-expand.grid(1:7,1:12)
plotvar<-cbind(genNos$Var2,genNos$Var1,res)
pos<-plotvar[plotvar[,3]>=0,]
max<-sum(abs(pos[,3]))
symbols(pos[,1],pos[,2],squares = 3*(abs(pos[,3]/(max))),inches = FALSE,xlab="Columns",ylab="Rows",main="Symbol Plot")
pos<-plotvar[plotvar[,3]<0,]
symbols(pos[,1],pos[,2],circles = 3*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
}
symbolPlot(df)
diag.MP <- function(fit){
source("rrline.r")
fit.comp <- matrix(fit$row,ncol=1) %*% matrix(fit$col,nrow=1)/fit$overall
plot(fit.comp, fit$res,xlab="Comparison value",ylab="Residual",cex=0.5)
abline(v=0,h=0,lty=2)
ls <- lm(c(fit$res)~c(fit.comp))
abline(ls,col="red",lty=3)
rr <- run.rrline(fit.comp,fit$res,iter=10)
abline(rr$a, rr$b, col="red")
pwr1 <- 1 - rr$b
pwr2 <- 1 - ls$coef[2]
title("",paste("Approximate power =",format(round(pwr1,2))," or ", format(round(pwr2,2))))
}
diag.MP(results)
df.t<-(df)^(0.17)
results.t<-medpolish(df.t)
diag.MP(results.t)
Analog_R_Square<- 1-((sum(abs(results.t$residuals))) /(sum(abs(df.t-results.t$overall))))
stem(results.t$residuals,2)
boxplot(results.t$residuals)
boxplot(t(results.t$residuals))
forgetitplot <- function(outmpol,outlim=0,...) {
# outmpol is output of medpolish in library(eda) or library(stats)
# be sure to assign dimnames to matrix being polished
oldpar <- par()
par(fig=c(0,.7,0,1))
nc <- length(outmpol$col)
nr <- length(outmpol$row)
a <- rep(outmpol$row,nc)
b <- rep(outmpol$col,rep(nr,nc))
sqrt2 <- sqrt(2)
ab <- cbind((a-b)/sqrt2,(a+b)/sqrt2)
xrange <- range(ab[,1]) + c(-.1,.1)*(max(ab[,1])-min(ab[,1]))
yrange <- range(ab[,2]) + c(-.1,.1)*(max(ab[,2])-min(ab[,2]))
dx <- (xrange[2]-xrange[1])/50
dy <- (yrange[2]-yrange[1])/50
plot(ab[,1],ab[,2],axes=F,xlim=xrange,ylim=yrange,xlab="",ylab="",...)
segments((min(a)-outmpol$col)/sqrt2, (min(a)+outmpol$col)/sqrt2,
(max(a)-outmpol$col)/sqrt2, (max(a)+outmpol$col)/sqrt2,lty=3)
segments((outmpol$row-min(b))/sqrt2, (outmpol$row+min(b))/sqrt2,
(outmpol$row-max(b))/sqrt2, (outmpol$row+max(b))/sqrt2,lty=3)
# segments((outmpol$row)/sqrt2-min(b), (outmpol$row)/sqrt2+min(b),
#        (outmpol$row)/sqrt2-max(b), (outmpol$row)/sqrt2+max(b),lty=3)
yrowloc <-  rep(max(b),nr)
xrowloc <-  outmpol$row
# text((xrowloc-yrowloc)/sqrt2-dx,dy+(xrowloc+yrowloc)/sqrt2,format(1:nr))
text((xrowloc-yrowloc)/sqrt2-dx,dy+(xrowloc+yrowloc)/sqrt2,
names(sort(outmpol$row)))
xcolloc <- rep(max(a),nc)
ycolloc <- outmpol$col
# text(dx+(xcolloc-ycolloc)/sqrt2,dy+(xcolloc+ycolloc)/sqrt2,format(1:nc))
text(dx+(xcolloc-ycolloc)/sqrt2,dy+(xcolloc+ycolloc)/sqrt2,
names(sort(outmpol$col)))
ynames <- format(round(outmpol$overall + sqrt2*pretty(ab[,2])))
axis(2,at=pretty(ab[,2]),labels=ynames)
# add vertical lines when there is an outlier
if(abs(outlim) > 1e-4) {
out.index <- which(abs(outmpol$res) > outlim, arr.ind=T)
# find (r,c) for outlier indices
zz.x <- outmpol$row[out.index[,1]]
zz.y <- outmpol$col[out.index[,2]]
# outlier points at (zz.x-zz.y)/sqrt2, (zz.x+zz.y)/sqrt2
# draw segment from here to end of residual
segments((zz.x-zz.y)/sqrt2, (zz.x+zz.y)/sqrt2,
(zz.x-zz.y)/sqrt2, (zz.x+zz.y)/sqrt2 + outmpol$res[out.index])
}
par <- oldpar
invisible()
}
forgetitplot(results.t)
vectorize.medpolish<-function(residuals.mp){
residualslist <- c(residuals.mp)
residuals.ret <- c()
for (i in 1:nrow(residuals.mp)){
residuals.ret <- rbind(residuals.ret,c(sample(residualslist,ncol(residuals.mp),replace = TRUE)))
}
return (residuals.ret)
}
bootstrap.medpolish<-function(mat,sims){
nrows <- nrow(mat)
ncols <- ncol (mat)
row.est <- matrix(0,nrow=sims,ncol=nrows)
col.est <- matrix(0,nrow=sims,ncol=ncols)
overall.est <- c()
org.result<-medpolish(mat)
sample.mat <- org.result$residuals
sample.result <- org.result
for (j in 1:sims){
new.residuals <- vectorize.medpolish(sample.mat)
bs.mat <- new.residuals+t(rbind(sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row))+sapply(c(sample.result$col),function(x) rep(x,nrow(sample.result$residuals)))+matrix(sample.result$overall,nrow=length(sample.result$row),ncol=length(sample.result$col))
sample.result <- medpolish(bs.mat,maxiter = 1000)
sample.mat<-sample.result$residuals
#print(row.est[j,])
#print(bs.mat)
#print(c(sample.result$row))
row.est[j,]<-c(sample.result$row)
col.est[j,]<-c(sample.result$col)
overall.est[j]<-sample.result$overall
}
return(list(row.est=row.est,col.est=col.est,overall.est=overall.est))
}
b<-bootstrap.medpolish(df,50)
overall.serror<-sd(b[3])/sqrt(length(df))
print(paste("Bootstrap Estimates for overall : ",mean(b$overall.est)))
print(paste("The standard error of Bootstrap Estimates",overall.serror))
vectorize.medpolish<-function(residuals.mp){
residualslist <- c(residuals.mp)
residuals.ret <- c()
for (i in 1:nrow(residuals.mp)){
residuals.ret <- rbind(residuals.ret,c(sample(residualslist,ncol(residuals.mp),replace = TRUE)))
}
return (residuals.ret)
}
bootstrap.medpolish<-function(mat,sims){
nrows <- nrow(mat)
ncols <- ncol (mat)
row.est <- matrix(0,nrow=sims,ncol=nrows)
col.est <- matrix(0,nrow=sims,ncol=ncols)
overall.est <- c()
org.result<-medpolish(mat)
sample.mat <- org.result$residuals
sample.result <- org.result
for (j in 1:sims){
new.residuals <- vectorize.medpolish(sample.mat)
bs.mat <- new.residuals+t(rbind(sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row,sample.result$row))+sapply(c(sample.result$col),function(x) rep(x,nrow(sample.result$residuals)))+matrix(sample.result$overall,nrow=length(sample.result$row),ncol=length(sample.result$col))
sample.result <- medpolish(bs.mat,maxiter = 1000)
sample.mat<-sample.result$residuals
#print(row.est[j,])
#print(bs.mat)
#print(c(sample.result$row))
row.est[j,]<-c(sample.result$row)
col.est[j,]<-c(sample.result$col)
overall.est[j]<-sample.result$overall
}
return(list(row.est=row.est,col.est=col.est,overall.est=overall.est))
}
b<-bootstrap.medpolish(df,50)
overall.serror<-sd(b$overall.est)/sqrt(length(df))
print(paste("Bootstrap Estimates for overall : ",mean(b$overall.est)))
print(paste("The standard error of Bootstrap Estimates",overall.serror))
exit()
exit
