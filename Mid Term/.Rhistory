clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere$cluster
plot(genere_df)
plot(genere_df[-1])
plot(cust~.)
plot(cust~.,data=genere_df)
plot(cust_id~.,data=genere_df)
hist(cust_id~.,data=genere_df)
library(ggplot2)
qplot(cust_id~Romance,data=genere_df)
qplot(cust_id,Romance,data=genere_df)
qplot(cust_id,Romance,data=genere_df)+geom_line()
qplot(cust_id,Romance,data=genere_df),geom_histogram()
qplot(cust_id,Romance,data=genere_df)+geom_histogram()
qplot(cust_id,data=genere_df)+geom_histogram()
melt(genere_df)
require(reshape)
require(dplyr)
melt
plot.ts(genere_df)
require(reshape2)
melt(genere_df,id=cust_id)
melt(genere_df,id="cust_id")
plot.df<-melt(genere_df,id="cust_id")
ggplot(cust_id,value,data=plot.df,facets=variable~.)
ggplot(x=cust_id,y=value,data=plot.df,facets=variable~.)
ggplot(x=cust_id,y=value,data=plot.df,facets=variable~.)+geom_line()
qplot(x=cust_id,y=value,data=plot.df,facets=variable~.)
qplot(x=cust_id,data=plot.df,facets=variable~.)
qplot(x=cust_id,y=value,data=plot.df,facets=variable~.)+geom_bar()
ggplot(plot.df,aes(x=cust_id,y=value),facet(variable~.))+stat_summary(fun.y="mean",geom="bar")
ggplot(plot.df,aes(x=cust_id,y=value))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")
ggplot(plot.df,aes(x=cust_id,y=value))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="line")
ggplot(plot.df,aes(x=cust_id,y=value))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")
ggplot(plot.df,aes(x=cust_id,y=value),color="cust_id")+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")
ggplot(plot.df,aes(x=cust_id,y=value,color="cust_id"))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")
ggplot(plot.df,aes(x=cust_id,y=value))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar",color="cust_id")
ggplot(plot.df,aes(x=cust_id,y=value))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar",color="red")
ggplot(plot.df,aes(x=cust_id,y=value))+facet_grid(variable~.))+stat_summary(fun.y="mean",geom="bar")
ggplot(plot.df,aes(x=cust_id,y=value))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")+scale_fill_brewer(palette="Spectral")
ggplot(plot.df,aes(x=cust_id,y=value,color="red"))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")+scale_fill_brewer(palette="Spectral")
ggplot(plot.df,aes(x=cust_id,y=value,color="green"))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")+scale_fill_brewer(palette="Spectral")
ggplot(plot.df,aes(x=cust_id,y=value),color="red")+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")+scale_fill_brewer(palette="Spectral")
ggplot(plot.df,aes(x=cust_id,y=value))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")+color(cust_id)
ggplot(plot.df,aes(x=cust_id,y=value,color=variable))+facet_grid(variable~.))+stat_summary(fun.y="mean",geom="bar")
ggplot(plot.df,aes(x=cust_id,y=value,color=variable)+facet_grid(variable~.))+stat_summary(fun.y="mean",geom="bar")
ggplot(plot.df,aes(x=cust_id,y=value,color=variable))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")
ggplot(plot.df,aes(x=cust_id,y=value,color=variable,fill=variable)+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")+
)
ggplot(plot.df,aes(x=cust_id,y=value,color=variable,fill=variable))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")+
l
ggplot(plot.df,aes(x=cust_id,y=value,color=variable,fill=variable))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")
plot(genere_df[-1])
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select genere,count(genere) 'Views' from cust_film group by genere order by Views desc;")
plot_df1 = fetch(rs, n=-1)
rs = dbSendQuery(sqldb, "select movie_id,count(movie_id) 'Views' from cust_film group by movie_id order by Views desc;")
plot_df2 = fetch(rs, n=-1)
ggplot(plot_df1,aes(x=cust_id,y=value,color=cust_id,fill=cust_id))+stat_summary(fun.y="mean",geom="bar")
ggplot(plot_df1,aes(x=genere,y=value,color=genere,fill=genere))+stat_summary(fun.y="mean",geom="bar")
ggplot(plot_df1,aes(x=genere,y=Views,color=genere,fill=genere))+stat_summary(fun.y="mean",geom="bar")
ggplot(plot_df2,aes(x=movie_id,y=Views,color=movie_id,fill=movie_id))+stat_summary(fun.y="mean",geom="bar")
ggplot(plot_df2,aes(x=movie_id,y=Views,color=movie_id,fill=movie_id))+stat_summary(fun.y="mean",geom="line")
ggplot(plot_df1,aes(x=genere,y=Views,color=genere,fill=genere))+stat_summary(fun.y="mean",geom="line")
ggplot(plot_df2,aes(x=movie_id,y=Views,color=movie_id,fill=movie_id))+stat_summary(fun.y="mean",geom="bar")
plot_df2[,1]<-as.factor(plot_df2[,1])
ggplot(plot_df2,aes(x=movie_id,y=Views,color=movie_id,fill=movie_id))+stat_summary(fun.y="mean",geom="bar")
ggplot(plot_df1,aes(x=genere,y=Views,color=genere,fill=genere))+stat_summary(fun.y="mean",geom="bar")
library(ggplot2)
library(reshape2)
library(RSQLite)
plot(genere_df[-1])
plot.df<-melt(genere_df,id="cust_id")
qplot(cust_id,facets = ,data=genere_df)+geom_histogram()
ggplot(plot.df,aes(x=cust_id,y=value,color=variable,fill=variable))+facet_grid(variable~.)+stat_summary(fun.y="mean",geom="bar")
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select genere,count(genere) 'Views' from cust_film group by genere order by Views desc;")
plot_df1 = fetch(rs, n=-1)
rs = dbSendQuery(sqldb, "select movie_id,count(movie_id) 'Views' from cust_film group by movie_id order by Views desc;")
plot_df2 = fetch(rs, n=-1)
ggplot(plot_df1,aes(x=genere,y=Views,color=genere,fill=genere))+stat_summary(fun.y="mean",geom="bar")
plot_df2[,1]<-as.factor(plot_df2[,1])
ggplot(plot_df2,aes(x=movie_id,y=Views,color=movie_id,fill=movie_id))+stat_summary(fun.y="mean",geom="bar")
Genere<-c("Romance","Science  Fiction","Horror","Comedy","Drama","Action","Documentary","Classic")
Code<-c("r","s","h","c","d","a","o","l")
DC<-as.data.frame(cbind(Genere,Code))
mv1<-c("1","r","s",NA,NA)
mv2<-c("2","o","l","a",NA)
mv3<-c("3","c","d","h",NA)
mv4<-c("4","s","l","o","a")
mv5<-c("5","a","d","r",NA)
mv6<-c("6","d","h","c",NA)
mv7<-c("7","a","d","c","o")
mv8<-c("8","h","l","r",NA)
mv9<-c("9","s","d",NA,NA)
mv10<-c("10","c","r",NA,NA)
MIDG<-as.data.frame(rbind(mv1,mv2,mv3,mv4,mv5,mv6,mv7,mv8,mv9,mv10))
colnames(MIDG)<-c("Mv_ID","G1","G2","G3","G4")
C1<-c("CID1","CID2","CID3","CID4","CID5","CID6","CID7","CID8","CID9","CID10","CID11","CID12","CID13","CID14")
C2<-c(1,4,7,2,4,3,1,5,10,2,1,3,8,5)
C3<-c(3,1,8,NA,8,9,2,4,1,4,10,5,1,2)
C4<-c(5,2,1,NA,10,10,3,9,2,3,8,1,7,8)
C5<-c(5,3,NA,NA,NA,1,NA,5,23,7,NA,2,NA,NA)
C6<-c(10,NA,NA,NA,NA,NA,NA,NA,NA,9,NA,NA,NA,NA)
c7<-c(8,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
CIDM<-as.data.frame(cbind(C1,C2,C3,C4,C5,C6,c7))
View(CIDM)
library(RMySQL)
library(corrplot)
plotMinIntra<-function(dataframe,startIndex,endIndex,clusterNo,iterationNo){
par(mfrow=c(floor(iterationNo/2),floor(iterationNo/2)),mar=c(2,2,2,2))
for(j in 1:iterationNo){
nos<-1:clusterNo
sum_v=c()
for(i in 1:clusterNo){
sum_v<-c(sum_v,sum(kmeans(dataframe[startIndex:endIndex],i)$withinss))
}
plot(nos,sum_v,main="Intrablock Dist Vs # of Blocks",xlab = "# cluster",ylab = "Sum of Intrablock Distance",type="o")
}
}
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select * from cluster_genere")
genere_df = fetch(rs, n=-1)
rs = dbSendQuery(sqldb, "select * from cluster_movie")
movie_df = fetch(rs, n=-1)
plotMinIntra(genere_df,2,9,9,4)
clust_genere<-kmeans(genere_df[2:9],3,iter.max = 10)
clusplot(genere_df[2:9],clust_genere$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Genere")
clust_genere$cluster
corrplot(movie_df[-1],method=c("number"))
corrplot(movie_df,method=c("number"))
corrplot(cor(movie_df[-1]),method=c("number"))
movie_df<-movie_df[,-7]
corrplot(cor(movie_df[-1]),method=c("number"))
corrplot(cor(movie_df[-1]),method=c("square"))
tocl_movie_df<-movie_df[,-8]
#Remove Labels
tocl_movie_df<-tocl_movie_df[,-1]
#Retry finding best clusters
plotMinIntra(tocl_movie_df,1,8,5,4)
clust_movie<-kmeans(tocl_movie_df,3)
clusplot(tocl_movie_df,clust_movie$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Film")
tocl_movie_df<-movie_df[,-8]
#Remove Labels
tocl_movie_df<-tocl_movie_df[,-1]
#Retry finding best clusters
plotMinIntra(tocl_movie_df,1,8,5,4)
clust_movie<-kmeans(tocl_movie_df,3)
clusplot(tocl_movie_df,clust_movie$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Film")
tocl_movie_df<-movie_df[,-8]
#Remove Labels
tocl_movie_df<-tocl_movie_df[,-1]
#Retry finding best clusters
plotMinIntra(tocl_movie_df,1,8,5,4)
clust_movie<-kmeans(tocl_movie_df,3)
clusplot(tocl_movie_df,clust_movie$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Film")
tocl_movie_df<-movie_df[,-8]
#Remove Labels
tocl_movie_df<-tocl_movie_df[,-1]
#Retry finding best clusters
plotMinIntra(tocl_movie_df,1,8,5,4)
clust_movie<-kmeans(tocl_movie_df,3)
clusplot(tocl_movie_df,clust_movie$cluster,color=TRUE,shade=TRUE,labels=2,lines=0,main="Cluster Visualization by Film")
getwd(0)
getwd()
#Program4: Association Rules
library(arules)
library(arulesViz)
library(RMySQL)
#Retrieve data from database
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select * from cluster_genere")
genere_df = fetch(rs, n=-1)
rs = dbSendQuery(sqldb, "select * from cluster_movie")
movie_df = fetch(rs, n=-1)
#Remove the movie id and convert the rest to factors.
genere_df<-genere_df[-2]
genere_df[,1]<-as.factor(genere_df[,1])
genere_df[,2]<-as.factor(genere_df[,2])
#Convert the data frame to transcation
#write.table(genere_df,"transactions_genere.csv",row.names = FALSE,col.names = FALSE,sep = ",")
#Manually replaced quotes
txn_genere<-read.transactions(file="transactions_genere.csv",format = "single",sep=",",rm.duplicates=TRUE,cols=c(1,2))
inspect(txn_genere)
ru_genere<-apriori(txn_genere,parameter = list(supp=0.7,conf=1,target="rules"))
inspect(ru_genere)
plot(ru_genere,method="graph",control=list(type="items"))
plot(ru_genere,method="grouped")
#Program4: Association Rules
library(arules)
library(arulesViz)
library(RMySQL)
#Retrieve data from database
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select * from cluster_genere")
genere_df = fetch(rs, n=-1)
rs = dbSendQuery(sqldb, "select * from cluster_movie")
movie_df = fetch(rs, n=-1)
#Remove the movie id and convert the rest to factors.
genere_df<-genere_df[-2]
genere_df[,1]<-as.factor(genere_df[,1])
genere_df[,2]<-as.factor(genere_df[,2])
#Convert the data frame to transcation
write.table(genere_df,"transactions_genere.csv",row.names = FALSE,col.names = FALSE,sep = ",")
#Manually replaced quotes
txn_genere<-read.transactions(file="transactions_genere.csv",format = "single",sep=",",rm.duplicates=TRUE,cols=c(1,2))
inspect(txn_genere)
ru_genere<-apriori(txn_genere,parameter = list(supp=0.7,conf=1,target="rules"))
inspect(ru_genere)
plot(ru_genere,method="graph",control=list(type="items"))
plot(ru_genere,method="grouped")
txn_genere<-read.transactions(file="transactions_genere.csv",format = "single",sep=",",rm.duplicates=TRUE,cols=c(1,2))
inspect(txn_genere)
ru_genere<-apriori(txn_genere,parameter = list(supp=0.7,conf=1,target="rules"))
inspect(ru_genere)
plot(ru_genere,method="graph",control=list(type="items"))
plot(ru_genere,method="grouped")
txn_genere<-read.transactions(file="transactions_genere.csv",format = "single",sep=",",rm.duplicates=TRUE,cols=c(1,2))
inspect(txn_genere)
ru_genere<-apriori(txn_genere,parameter = list(supp=0.7,conf=1,target="rules"))
inspect(ru_genere)
plot(ru_genere,method="graph",control=list(type="items"))
plot(ru_genere,method="grouped")
txn_genere<-read.transactions(file="transactions_genere.csv",format = "single",sep=",",rm.duplicates=TRUE,cols=c(1,2))
inspect(txn_genere)
getwd()
setwd("C:/Users/Ganesh/Google Drive/Courses/CSCI B 565/Mid Term")
txn_genere<-read.transactions(file="transactions_genere.csv",format = "single",sep=",",rm.duplicates=TRUE,cols=c(1,2))
inspect(txn_genere)
ru_genere<-apriori(txn_genere,parameter = list(supp=0.7,conf=1,target="rules"))
inspect(ru_genere)
plot(ru_genere,method="graph",control=list(type="items"))
plot(ru_genere,method="grouped")
movie_df[,1]<-as.factor(movie_df[,1])
movie_df[,2]<-as.factor(movie_df[,2])
txn_film<-read.transactions(file="transactions_film.csv",format = "single",sep=",",rm.duplicates=TRUE,cols=c(1,2))
inspect(txn_film)
ru_film<-apriori(txn_film,parameter = list(supp=0.2,conf=0.5,target="rules"))
inspect(ru_film)
plot(ru_film,method="graph",control=list(type="items"))
plot(ru_film,method="grouped")
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select * from cluster_genere")
genere_df = fetch(rs, n=-1)
rs = dbSendQuery(sqldb, "select * from cluster_movie")
movie_df = fetch(rs, n=-1)
movie_test<-as.data.frame(as.matrix(t(c(0,0,1,0,0,1,0,0,1,1,0))))
movie_test[1]=as.factor(c("NA"))
movie_df[,1]<-as.factor(movie_df[,1])
colnames(movie_test)<-colnames(movie_df)
ru_knn<-knn(movie_df[-1],movie_test[,-1],movie_df[,1],k=3)
ru_knn
library(RMySQL)
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select * from cluster_genere")
genere_df = fetch(rs, n=-1)
data<-as.data.frame(t(genere_df))
data<-data[-1,]
d <- dist(data, method = "euclidean")
fit <- hclust(d, method="ward.D")
plot(fit,xlab="Genere")
?hclust
?dist
fit <- hclust(d, method="average")
plot(fit,xlab="Genere")
#bayes with test and train dataset
library(RMySQL)
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select 	mv_id,sum(case when genere='Romance' then 1 else 0 end) 'Romance',
,sum(case when genere='Science  Fiction' then 1 else 0 end) 'SciFi',
sum(case when genere='Horror' then 1 else 0 end) 'Horror',
sum(case when genere='Comedy' then 1 else 0 end) 'Comedy',
sum(case when genere='Drama' then 1 else 0 end) 'Drama',
sum(case when genere='Action' then 1 else 0 end) 'Action',
sum(case when genere='Documentary' then 1 else 0 end) 'Documentary',
sum(case when genere='Classic' then 1 else 0 end) 'Classic'
from movie_genere group by mv_id order by mv_id;")
ctGenere_df = fetch(rs, n=-1)
ctGenere_df["Views"]<-NA
rs = dbSendQuery(sqldb,"select movie_id 'mv_id',count(movie_id) 'count' from cust_movie group by movie_id order by mv_id;")
ctViews_df = ctGenere_df = fetch(rs, n=-1)
ctGenere_df[,10]<-ctViews_df[,2]
#Normalize Views
normalize <-function(x){
num <- x-min(x)
denom <- max(x)-min(x)
return (num/denom)
}
nmgenre_df<-as.data.frame(lapply(ctGenere_df[-1],normalize))
nmgenre_df["mv_id"]<-NA
nmgenre_df[,10]<-as.factor(ctGenere_df[,1])
#Create Naive Bayes Predictor
model<-naiveBayes(mv_id+~.,data=nmgenre_df)
predict(model,nmgenre_df[1:8])
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select 	mv_id,sum(case when genere='Romance' then 1 else 0 end) 'Romance',
sum(case when genere='Science  Fiction' then 1 else 0 end) 'SciFi',
sum(case when genere='Horror' then 1 else 0 end) 'Horror',
sum(case when genere='Comedy' then 1 else 0 end) 'Comedy',
sum(case when genere='Drama' then 1 else 0 end) 'Drama',
sum(case when genere='Action' then 1 else 0 end) 'Action',
sum(case when genere='Documentary' then 1 else 0 end) 'Documentary',
sum(case when genere='Classic' then 1 else 0 end) 'Classic'
from movie_genere group by mv_id order by mv_id;")
ctGenere_df = fetch(rs, n=-1)
ctGenere_df["Views"]<-NA
rs = dbSendQuery(sqldb,"select movie_id 'mv_id',count(movie_id) 'count' from cust_movie group by movie_id order by mv_id;")
ctViews_df = ctGenere_df = fetch(rs, n=-1)
ctGenere_df[,10]<-ctViews_df[,2]
#Normalize Views
normalize <-function(x){
num <- x-min(x)
denom <- max(x)-min(x)
return (num/denom)
}
nmgenre_df<-as.data.frame(lapply(ctGenere_df[-1],normalize))
nmgenre_df["mv_id"]<-NA
nmgenre_df[,10]<-as.factor(ctGenere_df[,1])
#Create Naive Bayes Predictor
model<-naiveBayes(mv_id+~.,data=nmgenre_df)
predict(model,nmgenre_df[1:8])
nmgenre_df<-as.data.frame(lapply(ctGenere_df[-1],normalize))
nmgenre_df["mv_id"]<-NA
ctGenere_df = fetch(rs, n=-1)
ctGenere_df["Views"]<-NA
rs = dbSendQuery(sqldb,"select movie_id 'mv_id',count(movie_id) 'count' from cust_movie group by movie_id order by mv_id;")
ctViews_df = ctGenere_df = fetch(rs, n=-1)
ctGenere_df = fetch(rs, n=-1)
ctGenere_df["Views"]<-NA
qldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select 	mv_id,sum(case when genere='Romance' then 1 else 0 end) 'Romance',
sum(case when genere='Science  Fiction' then 1 else 0 end) 'SciFi',
sum(case when genere='Horror' then 1 else 0 end) 'Horror',
sum(case when genere='Comedy' then 1 else 0 end) 'Comedy',
sum(case when genere='Drama' then 1 else 0 end) 'Drama',
sum(case when genere='Action' then 1 else 0 end) 'Action',
sum(case when genere='Documentary' then 1 else 0 end) 'Documentary',
sum(case when genere='Classic' then 1 else 0 end) 'Classic'
from movie_genere group by mv_id order by mv_id;")
ctGenere_df = fetch(rs, n=-1)
ctGenere_df["Views"]<-NA
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select 	mv_id,sum(case when genere='Romance' then 1 else 0 end) 'Romance',
sum(case when genere='Science  Fiction' then 1 else 0 end) 'SciFi',
sum(case when genere='Horror' then 1 else 0 end) 'Horror',
sum(case when genere='Comedy' then 1 else 0 end) 'Comedy',
sum(case when genere='Drama' then 1 else 0 end) 'Drama',
sum(case when genere='Action' then 1 else 0 end) 'Action',
sum(case when genere='Documentary' then 1 else 0 end) 'Documentary',
sum(case when genere='Classic' then 1 else 0 end) 'Classic'
from movie_genere group by mv_id order by mv_id;")
ctGenere_df = fetch(rs, n=-1)
ctGenere_df["Views"]<-NA
rs = dbSendQuery(sqldb,"select movie_id 'mv_id',count(movie_id) 'count' from cust_movie group by movie_id order by mv_id;")
ctViews_df = ctGenere_df = fetch(rs, n=-1)
ctGenere_df[,10]<-ctViews_df[,2]
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select 	mv_id,sum(case when genere='Romance' then 1 else 0 end) 'Romance',
sum(case when genere='Science  Fiction' then 1 else 0 end) 'SciFi',
sum(case when genere='Horror' then 1 else 0 end) 'Horror',
sum(case when genere='Comedy' then 1 else 0 end) 'Comedy',
sum(case when genere='Drama' then 1 else 0 end) 'Drama',
sum(case when genere='Action' then 1 else 0 end) 'Action',
sum(case when genere='Documentary' then 1 else 0 end) 'Documentary',
sum(case when genere='Classic' then 1 else 0 end) 'Classic'
from movie_genere group by mv_id order by mv_id;")
ctGenere_df = fetch(rs, n=-1)
ctGenere_df["Views"]<-NA
ctViews_df[,2]
ctGenere_df[,10]
ctGenere_df[,10]<-ctViews_df[,2]
#Normalize Views
normalize <-function(x){
num <- x-min(x)
denom <- max(x)-min(x)
return (num/denom)
}
nmgenre_df<-as.data.frame(lapply(ctGenere_df[-1],normalize))
nmgenre_df["mv_id"]<-NA
nmgenre_df[,10]<-as.factor(ctGenere_df[,1])
model<-naiveBayes(mv_id+~.,data=nmgenre_df)
predict(model,nmgenre_df[1:8])
